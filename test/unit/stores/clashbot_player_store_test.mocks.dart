// Mocks generated by Mockito 5.4.5 from annotations
// in clashbot_flutter/test/unit/stores/clashbot_player_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:clash_bot_api/api.dart' as _i12;
import 'package:clashbot_flutter/models/clash_notification.dart' as _i16;
import 'package:clashbot_flutter/models/clash_team.dart' as _i3;
import 'package:clashbot_flutter/models/clash_tournament.dart' as _i13;
import 'package:clashbot_flutter/models/clashbot_user.dart' as _i2;
import 'package:clashbot_flutter/models/discord_guild.dart' as _i18;
import 'package:clashbot_flutter/models/discord_user.dart' as _i8;
import 'package:clashbot_flutter/models/lol_champion.dart' as _i9;
import 'package:clashbot_flutter/models/tentative_queue.dart' as _i4;
import 'package:clashbot_flutter/services/clashbot_service.dart' as _i10;
import 'package:clashbot_flutter/stores/application_details.store.dart' as _i14;
import 'package:clashbot_flutter/stores/discord_details.store.dart' as _i5;
import 'package:clashbot_flutter/stores/riot_champion.store.dart' as _i6;
import 'package:mobx/mobx.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;

import 'clashbot_player_store_test.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClashBotUser_0 extends _i1.SmartFake implements _i2.ClashBotUser {
  _FakeClashBotUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClashTeam_1 extends _i1.SmartFake implements _i3.ClashTeam {
  _FakeClashTeam_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTentativeQueue_2 extends _i1.SmartFake
    implements _i4.TentativeQueue {
  _FakeTentativeQueue_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDiscordDetailsStore_3 extends _i1.SmartFake
    implements _i5.DiscordDetailsStore {
  _FakeDiscordDetailsStore_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRiotChampionStore_4 extends _i1.SmartFake
    implements _i6.RiotChampionStore {
  _FakeRiotChampionStore_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableList_5<T> extends _i1.SmartFake
    implements _i7.ObservableList<T> {
  _FakeObservableList_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableMap_6<K, V> extends _i1.SmartFake
    implements _i7.ObservableMap<K, V> {
  _FakeObservableMap_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_7 extends _i1.SmartFake
    implements _i7.ReactiveContext {
  _FakeReactiveContext_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDiscordUser_8 extends _i1.SmartFake implements _i8.DiscordUser {
  _FakeDiscordUser_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoLChampionsData_9 extends _i1.SmartFake
    implements _i9.LoLChampionsData {
  _FakeLoLChampionsData_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ClashBotService].
///
/// See the documentation for Mockito's code generation for more information.
class MockClashBotService extends _i1.Mock implements _i10.ClashBotService {
  MockClashBotService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.ClashBotUser> getPlayer(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getPlayer,
          [id],
        ),
        returnValue: _i11.Future<_i2.ClashBotUser>.value(_FakeClashBotUser_0(
          this,
          Invocation.method(
            #getPlayer,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.ClashBotUser>);

  @override
  _i11.Future<_i2.ClashBotUser> createPlayer(
    String? id,
    String? name,
    String? defaultServerId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPlayer,
          [
            id,
            name,
            defaultServerId,
          ],
        ),
        returnValue: _i11.Future<_i2.ClashBotUser>.value(_FakeClashBotUser_0(
          this,
          Invocation.method(
            #createPlayer,
            [
              id,
              name,
              defaultServerId,
            ],
          ),
        )),
      ) as _i11.Future<_i2.ClashBotUser>);

  @override
  _i11.Future<List<String>> createSelectedServers(
    String? id,
    List<String>? selectedServers,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSelectedServers,
          [
            id,
            selectedServers,
          ],
        ),
        returnValue: _i11.Future<List<String>>.value(<String>[]),
      ) as _i11.Future<List<String>>);

  @override
  _i11.Future<List<String>> updateSelectedServers(
    String? id,
    List<String>? selectedServers,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSelectedServers,
          [
            id,
            selectedServers,
          ],
        ),
        returnValue: _i11.Future<List<String>>.value(<String>[]),
      ) as _i11.Future<List<String>>);

  @override
  _i11.Future<List<String>> removeSelectedServers(
    String? id,
    List<String>? selectedServers,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeSelectedServers,
          [
            id,
            selectedServers,
          ],
        ),
        returnValue: _i11.Future<List<String>>.value(<String>[]),
      ) as _i11.Future<List<String>>);

  @override
  _i11.Future<List<String>> getChampions(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getChampions,
          [id],
        ),
        returnValue: _i11.Future<List<String>>.value(<String>[]),
      ) as _i11.Future<List<String>>);

  @override
  _i11.Future<List<String>> updateChampions(
    String? id,
    String? champion,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateChampions,
          [
            id,
            champion,
          ],
        ),
        returnValue: _i11.Future<List<String>>.value(<String>[]),
      ) as _i11.Future<List<String>>);

  @override
  _i11.Future<List<String>> overwriteChampions(
    String? id,
    List<String>? champions,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overwriteChampions,
          [
            id,
            champions,
          ],
        ),
        returnValue: _i11.Future<List<String>>.value(<String>[]),
      ) as _i11.Future<List<String>>);

  @override
  _i11.Future<List<String>> removeChampion(
    String? id,
    String? champion,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChampion,
          [
            id,
            champion,
          ],
        ),
        returnValue: _i11.Future<List<String>>.value(<String>[]),
      ) as _i11.Future<List<String>>);

  @override
  _i11.Future<Map<String, bool>> getSubscriptions(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptions,
          [id],
        ),
        returnValue: _i11.Future<Map<String, bool>>.value(<String, bool>{}),
      ) as _i11.Future<Map<String, bool>>);

  @override
  _i11.Future<_i12.Subscription?> unsubscribe(
    String? id,
    _i12.SubscriptionType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [
            id,
            type,
          ],
        ),
        returnValue: _i11.Future<_i12.Subscription?>.value(),
      ) as _i11.Future<_i12.Subscription?>);

  @override
  _i11.Future<_i12.Subscription?> subscribe(
    String? id,
    _i12.SubscriptionType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [
            id,
            type,
          ],
        ),
        returnValue: _i11.Future<_i12.Subscription?>.value(),
      ) as _i11.Future<_i12.Subscription?>);

  @override
  _i11.Future<List<_i3.ClashTeam>> getClashTeams(
    String? id,
    List<String>? selectedServerIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getClashTeams,
          [
            id,
            selectedServerIds,
          ],
        ),
        returnValue: _i11.Future<List<_i3.ClashTeam>>.value(<_i3.ClashTeam>[]),
      ) as _i11.Future<List<_i3.ClashTeam>>);

  @override
  _i11.Future<_i3.ClashTeam> createClashTeam(
    String? discordId,
    String? name,
    _i12.Role? role,
    String? serverId,
    String? tournamentName,
    String? tournamentDay,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createClashTeam,
          [
            discordId,
            name,
            role,
            serverId,
            tournamentName,
            tournamentDay,
          ],
        ),
        returnValue: _i11.Future<_i3.ClashTeam>.value(_FakeClashTeam_1(
          this,
          Invocation.method(
            #createClashTeam,
            [
              discordId,
              name,
              role,
              serverId,
              tournamentName,
              tournamentDay,
            ],
          ),
        )),
      ) as _i11.Future<_i3.ClashTeam>);

  @override
  _i11.Future<_i3.ClashTeam> addToTeam(
    String? id,
    _i12.Role? role,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToTeam,
          [
            id,
            role,
            teamId,
          ],
        ),
        returnValue: _i11.Future<_i3.ClashTeam>.value(_FakeClashTeam_1(
          this,
          Invocation.method(
            #addToTeam,
            [
              id,
              role,
              teamId,
            ],
          ),
        )),
      ) as _i11.Future<_i3.ClashTeam>);

  @override
  _i11.Future<_i3.ClashTeam> removeFromTeam(
    String? id,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromTeam,
          [
            id,
            teamId,
          ],
        ),
        returnValue: _i11.Future<_i3.ClashTeam>.value(_FakeClashTeam_1(
          this,
          Invocation.method(
            #removeFromTeam,
            [
              id,
              teamId,
            ],
          ),
        )),
      ) as _i11.Future<_i3.ClashTeam>);

  @override
  _i11.Future<List<_i4.TentativeQueue>> getTentativeQueues(
    String? id,
    List<String>? selectedServerIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTentativeQueues,
          [
            id,
            selectedServerIds,
          ],
        ),
        returnValue:
            _i11.Future<List<_i4.TentativeQueue>>.value(<_i4.TentativeQueue>[]),
      ) as _i11.Future<List<_i4.TentativeQueue>>);

  @override
  _i11.Future<_i4.TentativeQueue> createTentativeQueue(
    String? discordId,
    String? serverId,
    String? tournamentName,
    String? tournamentDay,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTentativeQueue,
          [
            discordId,
            serverId,
            tournamentName,
            tournamentDay,
          ],
        ),
        returnValue:
            _i11.Future<_i4.TentativeQueue>.value(_FakeTentativeQueue_2(
          this,
          Invocation.method(
            #createTentativeQueue,
            [
              discordId,
              serverId,
              tournamentName,
              tournamentDay,
            ],
          ),
        )),
      ) as _i11.Future<_i4.TentativeQueue>);

  @override
  _i11.Future<_i4.TentativeQueue> addToTentativeQueue(
    String? id,
    String? tentativeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToTentativeQueue,
          [
            id,
            tentativeId,
          ],
        ),
        returnValue:
            _i11.Future<_i4.TentativeQueue>.value(_FakeTentativeQueue_2(
          this,
          Invocation.method(
            #addToTentativeQueue,
            [
              id,
              tentativeId,
            ],
          ),
        )),
      ) as _i11.Future<_i4.TentativeQueue>);

  @override
  _i11.Future<_i4.TentativeQueue> removeFromTentativeQueue(
    String? id,
    String? tentativeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromTentativeQueue,
          [
            id,
            tentativeId,
          ],
        ),
        returnValue:
            _i11.Future<_i4.TentativeQueue>.value(_FakeTentativeQueue_2(
          this,
          Invocation.method(
            #removeFromTentativeQueue,
            [
              id,
              tentativeId,
            ],
          ),
        )),
      ) as _i11.Future<_i4.TentativeQueue>);

  @override
  _i11.Future<List<_i13.ClashTournament>> retrieveTournaments(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveTournaments,
          [id],
        ),
        returnValue: _i11.Future<List<_i13.ClashTournament>>.value(
            <_i13.ClashTournament>[]),
      ) as _i11.Future<List<_i13.ClashTournament>>);
}

/// A class which mocks [ApplicationDetailsStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplicationDetailsStore extends _i1.Mock
    implements _i14.ApplicationDetailsStore {
  MockApplicationDetailsStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.DiscordDetailsStore get discordDetailsStore => (super.noSuchMethod(
        Invocation.getter(#discordDetailsStore),
        returnValue: _FakeDiscordDetailsStore_3(
          this,
          Invocation.getter(#discordDetailsStore),
        ),
      ) as _i5.DiscordDetailsStore);

  @override
  set discordDetailsStore(_i5.DiscordDetailsStore? _discordDetailsStore) =>
      super.noSuchMethod(
        Invocation.setter(
          #discordDetailsStore,
          _discordDetailsStore,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.RiotChampionStore get riotChampionStore => (super.noSuchMethod(
        Invocation.getter(#riotChampionStore),
        returnValue: _FakeRiotChampionStore_4(
          this,
          Invocation.getter(#riotChampionStore),
        ),
      ) as _i6.RiotChampionStore);

  @override
  set riotChampionStore(_i6.RiotChampionStore? _riotChampionStore) =>
      super.noSuchMethod(
        Invocation.setter(
          #riotChampionStore,
          _riotChampionStore,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? value) => super.noSuchMethod(
        Invocation.setter(
          #id,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ClashBotUser get clashBotUser => (super.noSuchMethod(
        Invocation.getter(#clashBotUser),
        returnValue: _FakeClashBotUser_0(
          this,
          Invocation.getter(#clashBotUser),
        ),
      ) as _i2.ClashBotUser);

  @override
  set clashBotUser(_i2.ClashBotUser? value) => super.noSuchMethod(
        Invocation.setter(
          #clashBotUser,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.ObservableList<String> get preferredServers => (super.noSuchMethod(
        Invocation.getter(#preferredServers),
        returnValue: _FakeObservableList_5<String>(
          this,
          Invocation.getter(#preferredServers),
        ),
      ) as _i7.ObservableList<String>);

  @override
  set preferredServers(_i7.ObservableList<String>? value) => super.noSuchMethod(
        Invocation.setter(
          #preferredServers,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get error => (super.noSuchMethod(
        Invocation.getter(#error),
        returnValue: _i15.dummyValue<String>(
          this,
          Invocation.getter(#error),
        ),
      ) as String);

  @override
  set error(String? value) => super.noSuchMethod(
        Invocation.setter(
          #error,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.ObservableList<_i16.ClashNotification> get notifications =>
      (super.noSuchMethod(
        Invocation.getter(#notifications),
        returnValue: _FakeObservableList_5<_i16.ClashNotification>(
          this,
          Invocation.getter(#notifications),
        ),
      ) as _i7.ObservableList<_i16.ClashNotification>);

  @override
  set notifications(_i7.ObservableList<_i16.ClashNotification>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #notifications,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.ObservableMap<String, _i12.Subscription> get subscription =>
      (super.noSuchMethod(
        Invocation.getter(#subscription),
        returnValue: _FakeObservableMap_6<String, _i12.Subscription>(
          this,
          Invocation.getter(#subscription),
        ),
      ) as _i7.ObservableMap<String, _i12.Subscription>);

  @override
  _i7.ObservableList<String> get sortedSelectedServers => (super.noSuchMethod(
        Invocation.getter(#sortedSelectedServers),
        returnValue: _FakeObservableList_5<String>(
          this,
          Invocation.getter(#sortedSelectedServers),
        ),
      ) as _i7.ObservableList<String>);

  @override
  List<_i16.ClashNotification> get sortedNotifications => (super.noSuchMethod(
        Invocation.getter(#sortedNotifications),
        returnValue: <_i16.ClashNotification>[],
      ) as List<_i16.ClashNotification>);

  @override
  List<_i16.ClashNotification> get unreadNotifications => (super.noSuchMethod(
        Invocation.getter(#unreadNotifications),
        returnValue: <_i16.ClashNotification>[],
      ) as List<_i16.ClashNotification>);

  @override
  bool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: false,
      ) as bool);

  @override
  _i7.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_7(
          this,
          Invocation.getter(#context),
        ),
      ) as _i7.ReactiveContext);

  @override
  _i11.Future<void> refreshSelectedServers() => (super.noSuchMethod(
        Invocation.method(
          #refreshSelectedServers,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> refreshClashBotUser() => (super.noSuchMethod(
        Invocation.method(
          #refreshClashBotUser,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void triggerError(String? errorMessage) => super.noSuchMethod(
        Invocation.method(
          #triggerError,
          [errorMessage],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyUser(_i16.ClashNotification? clashNotification) =>
      super.noSuchMethod(
        Invocation.method(
          #notifyUser,
          [clashNotification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void readNotification(String? uuid) => super.noSuchMethod(
        Invocation.method(
          #readNotification,
          [uuid],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unsubscribeFromServer(String? serverId) => super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromServer,
          [serverId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void subscribeToServer(String? serverId) => super.noSuchMethod(
        Invocation.method(
          #subscribeToServer,
          [serverId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> loadUserDetails() => (super.noSuchMethod(
        Invocation.method(
          #loadUserDetails,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i2.ClashBotUser> createUser(
    String? defaultServerId,
    List<String>? selectedServersToUse,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [
            defaultServerId,
            selectedServersToUse,
          ],
        ),
        returnValue: _i11.Future<_i2.ClashBotUser>.value(_FakeClashBotUser_0(
          this,
          Invocation.method(
            #createUser,
            [
              defaultServerId,
              selectedServersToUse,
            ],
          ),
        )),
      ) as _i11.Future<_i2.ClashBotUser>);
}

/// A class which mocks [DiscordServiceMock].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiscordServiceMock extends _i1.Mock
    implements _i17.DiscordServiceMock {
  MockDiscordServiceMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i8.DiscordUser> fetchCurrentUserDetails() => (super.noSuchMethod(
        Invocation.method(
          #fetchCurrentUserDetails,
          [],
        ),
        returnValue: _i11.Future<_i8.DiscordUser>.value(_FakeDiscordUser_8(
          this,
          Invocation.method(
            #fetchCurrentUserDetails,
            [],
          ),
        )),
      ) as _i11.Future<_i8.DiscordUser>);

  @override
  _i11.Future<List<_i18.DiscordGuild>> fetchUserGuilds() => (super.noSuchMethod(
        Invocation.method(
          #fetchUserGuilds,
          [],
        ),
        returnValue:
            _i11.Future<List<_i18.DiscordGuild>>.value(<_i18.DiscordGuild>[]),
      ) as _i11.Future<List<_i18.DiscordGuild>>);

  @override
  _i11.Future<_i8.DiscordUser> fetchUserDetails(String? discordId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserDetails,
          [discordId],
        ),
        returnValue: _i11.Future<_i8.DiscordUser>.value(_FakeDiscordUser_8(
          this,
          Invocation.method(
            #fetchUserDetails,
            [discordId],
          ),
        )),
      ) as _i11.Future<_i8.DiscordUser>);

  @override
  _i11.Future<void> loginToDiscord() => (super.noSuchMethod(
        Invocation.method(
          #loginToDiscord,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [RiotResourcesServiceMock].
///
/// See the documentation for Mockito's code generation for more information.
class MockRiotResourcesServiceMock extends _i1.Mock
    implements _i17.RiotResourcesServiceMock {
  MockRiotResourcesServiceMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<String> getLatestApiVersion() => (super.noSuchMethod(
        Invocation.method(
          #getLatestApiVersion,
          [],
        ),
        returnValue: _i11.Future<String>.value(_i15.dummyValue<String>(
          this,
          Invocation.method(
            #getLatestApiVersion,
            [],
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i11.Future<_i9.LoLChampionsData> getChampionDetails() => (super.noSuchMethod(
        Invocation.method(
          #getChampionDetails,
          [],
        ),
        returnValue:
            _i11.Future<_i9.LoLChampionsData>.value(_FakeLoLChampionsData_9(
          this,
          Invocation.method(
            #getChampionDetails,
            [],
          ),
        )),
      ) as _i11.Future<_i9.LoLChampionsData>);
}
