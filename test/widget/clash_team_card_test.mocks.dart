// Mocks generated by Mockito 5.4.5 from annotations
// in clashbot_flutter/test/widget/clash_team_card_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;

import 'package:clash_bot_api/api.dart' as _i17;
import 'package:clashbot_flutter/models/clash_notification.dart' as _i12;
import 'package:clashbot_flutter/models/clash_team.dart' as _i15;
import 'package:clashbot_flutter/models/clash_tournament.dart' as _i11;
import 'package:clashbot_flutter/models/clashbot_user.dart' as _i7;
import 'package:clashbot_flutter/models/discord_guild.dart' as _i14;
import 'package:clashbot_flutter/models/discord_user.dart' as _i6;
import 'package:clashbot_flutter/models/lol_champion.dart' as _i8;
import 'package:clashbot_flutter/models/tentative_queue.dart' as _i16;
import 'package:clashbot_flutter/stores/application_details.store.dart' as _i9;
import 'package:clashbot_flutter/stores/clashbot_player.store.dart' as _i3;
import 'package:clashbot_flutter/stores/discord_details.store.dart' as _i2;
import 'package:clashbot_flutter/stores/riot_champion.store.dart' as _i4;
import 'package:mobx/mobx.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDiscordDetailsStore_0 extends _i1.SmartFake
    implements _i2.DiscordDetailsStore {
  _FakeDiscordDetailsStore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClashPlayerStore_1 extends _i1.SmartFake
    implements _i3.ClashPlayerStore {
  _FakeClashPlayerStore_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRiotChampionStore_2 extends _i1.SmartFake
    implements _i4.RiotChampionStore {
  _FakeRiotChampionStore_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableList_3<T> extends _i1.SmartFake
    implements _i5.ObservableList<T> {
  _FakeObservableList_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_4 extends _i1.SmartFake
    implements _i5.ReactiveContext {
  _FakeReactiveContext_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDiscordUser_5 extends _i1.SmartFake implements _i6.DiscordUser {
  _FakeDiscordUser_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableMap_6<K, V> extends _i1.SmartFake
    implements _i5.ObservableMap<K, V> {
  _FakeObservableMap_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClashBotUser_7 extends _i1.SmartFake implements _i7.ClashBotUser {
  _FakeClashBotUser_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoLChampionsData_8 extends _i1.SmartFake
    implements _i8.LoLChampionsData {
  _FakeLoLChampionsData_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApplicationDetailsStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplicationDetailsStore extends _i1.Mock
    implements _i9.ApplicationDetailsStore {
  MockApplicationDetailsStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DiscordDetailsStore get discordDetailsStore => (super.noSuchMethod(
        Invocation.getter(#discordDetailsStore),
        returnValue: _FakeDiscordDetailsStore_0(
          this,
          Invocation.getter(#discordDetailsStore),
        ),
      ) as _i2.DiscordDetailsStore);

  @override
  set discordDetailsStore(_i2.DiscordDetailsStore? _discordDetailsStore) =>
      super.noSuchMethod(
        Invocation.setter(
          #discordDetailsStore,
          _discordDetailsStore,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ClashPlayerStore get loggedInClashUser => (super.noSuchMethod(
        Invocation.getter(#loggedInClashUser),
        returnValue: _FakeClashPlayerStore_1(
          this,
          Invocation.getter(#loggedInClashUser),
        ),
      ) as _i3.ClashPlayerStore);

  @override
  set loggedInClashUser(_i3.ClashPlayerStore? _loggedInClashUser) =>
      super.noSuchMethod(
        Invocation.setter(
          #loggedInClashUser,
          _loggedInClashUser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.RiotChampionStore get riotChampionStore => (super.noSuchMethod(
        Invocation.getter(#riotChampionStore),
        returnValue: _FakeRiotChampionStore_2(
          this,
          Invocation.getter(#riotChampionStore),
        ),
      ) as _i4.RiotChampionStore);

  @override
  set riotChampionStore(_i4.RiotChampionStore? _riotChampionStore) =>
      super.noSuchMethod(
        Invocation.setter(
          #riotChampionStore,
          _riotChampionStore,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? value) => super.noSuchMethod(
        Invocation.setter(
          #id,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ObservableList<_i11.ClashTournament> get tournaments =>
      (super.noSuchMethod(
        Invocation.getter(#tournaments),
        returnValue: _FakeObservableList_3<_i11.ClashTournament>(
          this,
          Invocation.getter(#tournaments),
        ),
      ) as _i5.ObservableList<_i11.ClashTournament>);

  @override
  set tournaments(_i5.ObservableList<_i11.ClashTournament>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #tournaments,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get error => (super.noSuchMethod(
        Invocation.getter(#error),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#error),
        ),
      ) as String);

  @override
  set error(String? value) => super.noSuchMethod(
        Invocation.setter(
          #error,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ObservableList<_i12.ClashNotification> get notifications =>
      (super.noSuchMethod(
        Invocation.getter(#notifications),
        returnValue: _FakeObservableList_3<_i12.ClashNotification>(
          this,
          Invocation.getter(#notifications),
        ),
      ) as _i5.ObservableList<_i12.ClashNotification>);

  @override
  set notifications(_i5.ObservableList<_i12.ClashNotification>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #notifications,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i12.ClashNotification> get sortedNotifications => (super.noSuchMethod(
        Invocation.getter(#sortedNotifications),
        returnValue: <_i12.ClashNotification>[],
      ) as List<_i12.ClashNotification>);

  @override
  List<_i12.ClashNotification> get unreadNotifications => (super.noSuchMethod(
        Invocation.getter(#unreadNotifications),
        returnValue: <_i12.ClashNotification>[],
      ) as List<_i12.ClashNotification>);

  @override
  bool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: false,
      ) as bool);

  @override
  _i5.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i5.ReactiveContext);

  @override
  _i13.Future<void> getTournaments() => (super.noSuchMethod(
        Invocation.method(
          #getTournaments,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void triggerError(String? errorMessage) => super.noSuchMethod(
        Invocation.method(
          #triggerError,
          [errorMessage],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyUser(_i12.ClashNotification? clashNotification) =>
      super.noSuchMethod(
        Invocation.method(
          #notifyUser,
          [clashNotification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void readNotification(String? uuid) => super.noSuchMethod(
        Invocation.method(
          #readNotification,
          [uuid],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unsubscribeFromServer(String? serverId) => super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromServer,
          [serverId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void subscribeToServer(String? serverId) => super.noSuchMethod(
        Invocation.method(
          #subscribeToServer,
          [serverId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> loadUserDetails() => (super.noSuchMethod(
        Invocation.method(
          #loadUserDetails,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [DiscordDetailsStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiscordDetailsStore extends _i1.Mock
    implements _i2.DiscordDetailsStore {
  MockDiscordDetailsStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.DiscordUser get discordUser => (super.noSuchMethod(
        Invocation.getter(#discordUser),
        returnValue: _FakeDiscordUser_5(
          this,
          Invocation.getter(#discordUser),
        ),
      ) as _i6.DiscordUser);

  @override
  set discordUser(_i6.DiscordUser? value) => super.noSuchMethod(
        Invocation.setter(
          #discordUser,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ObservableList<_i14.DiscordGuild> get discordGuilds =>
      (super.noSuchMethod(
        Invocation.getter(#discordGuilds),
        returnValue: _FakeObservableList_3<_i14.DiscordGuild>(
          this,
          Invocation.getter(#discordGuilds),
        ),
      ) as _i5.ObservableList<_i14.DiscordGuild>);

  @override
  set discordGuilds(_i5.ObservableList<_i14.DiscordGuild>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #discordGuilds,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ObservableMap<String, String> get discordIdToName => (super.noSuchMethod(
        Invocation.getter(#discordIdToName),
        returnValue: _FakeObservableMap_6<String, String>(
          this,
          Invocation.getter(#discordIdToName),
        ),
      ) as _i5.ObservableMap<String, String>);

  @override
  set discordIdToName(_i5.ObservableMap<String, String>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #discordIdToName,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#status),
        ),
      ) as String);

  @override
  set status(String? value) => super.noSuchMethod(
        Invocation.setter(
          #status,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get detailsLoaded => (super.noSuchMethod(
        Invocation.getter(#detailsLoaded),
        returnValue: false,
      ) as bool);

  @override
  bool get guildDetailsLoaded => (super.noSuchMethod(
        Invocation.getter(#guildDetailsLoaded),
        returnValue: false,
      ) as bool);

  @override
  Map<String, _i14.DiscordGuild> get discordGuildMap => (super.noSuchMethod(
        Invocation.getter(#discordGuildMap),
        returnValue: <String, _i14.DiscordGuild>{},
      ) as Map<String, _i14.DiscordGuild>);

  @override
  _i5.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i5.ReactiveContext);

  @override
  _i13.Future<_i6.DiscordUser> fetchUserDetails(String? discordId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserDetails,
          [discordId],
        ),
        returnValue: _i13.Future<_i6.DiscordUser>.value(_FakeDiscordUser_5(
          this,
          Invocation.method(
            #fetchUserDetails,
            [discordId],
          ),
        )),
      ) as _i13.Future<_i6.DiscordUser>);

  @override
  _i13.Future<void> fetchCurrentUserDetails() => (super.noSuchMethod(
        Invocation.method(
          #fetchCurrentUserDetails,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> fetchUserGuilds() => (super.noSuchMethod(
        Invocation.method(
          #fetchUserGuilds,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> loadEverything() => (super.noSuchMethod(
        Invocation.method(
          #loadEverything,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [ClashPlayerStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockClashPlayerStore extends _i1.Mock implements _i3.ClashPlayerStore {
  MockClashPlayerStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ClashBotUser get clashBotUser => (super.noSuchMethod(
        Invocation.getter(#clashBotUser),
        returnValue: _FakeClashBotUser_7(
          this,
          Invocation.getter(#clashBotUser),
        ),
      ) as _i7.ClashBotUser);

  @override
  set clashBotUser(_i7.ClashBotUser? value) => super.noSuchMethod(
        Invocation.setter(
          #clashBotUser,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ObservableList<_i15.ClashTeam> get currentClashTeams =>
      (super.noSuchMethod(
        Invocation.getter(#currentClashTeams),
        returnValue: _FakeObservableList_3<_i15.ClashTeam>(
          this,
          Invocation.getter(#currentClashTeams),
        ),
      ) as _i5.ObservableList<_i15.ClashTeam>);

  @override
  set currentClashTeams(_i5.ObservableList<_i15.ClashTeam>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentClashTeams,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ObservableList<_i16.TentativeQueue> get currentTentativeQueues =>
      (super.noSuchMethod(
        Invocation.getter(#currentTentativeQueues),
        returnValue: _FakeObservableList_3<_i16.TentativeQueue>(
          this,
          Invocation.getter(#currentTentativeQueues),
        ),
      ) as _i5.ObservableList<_i16.TentativeQueue>);

  @override
  set currentTentativeQueues(_i5.ObservableList<_i16.TentativeQueue>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentTentativeQueues,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get showTeams => (super.noSuchMethod(
        Invocation.getter(#showTeams),
        returnValue: false,
      ) as bool);

  @override
  set showTeams(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #showTeams,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get callInProgress => (super.noSuchMethod(
        Invocation.getter(#callInProgress),
        returnValue: false,
      ) as bool);

  @override
  set callInProgress(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #callInProgress,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set selectedServerName(String? value) => super.noSuchMethod(
        Invocation.setter(
          #selectedServerName,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set serverFilter(String? value) => super.noSuchMethod(
        Invocation.setter(
          #serverFilter,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tournamentNameFilter(String? value) => super.noSuchMethod(
        Invocation.setter(
          #tournamentNameFilter,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tournamentDayFilter(String? value) => super.noSuchMethod(
        Invocation.setter(
          #tournamentDayFilter,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ObservableList<String> get champions => (super.noSuchMethod(
        Invocation.getter(#champions),
        returnValue: _FakeObservableList_3<String>(
          this,
          Invocation.getter(#champions),
        ),
      ) as _i5.ObservableList<String>);

  @override
  set champions(_i5.ObservableList<String>? value) => super.noSuchMethod(
        Invocation.setter(
          #champions,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ObservableMap<String, _i17.Subscription> get subscriptions =>
      (super.noSuchMethod(
        Invocation.getter(#subscriptions),
        returnValue: _FakeObservableMap_6<String, _i17.Subscription>(
          this,
          Invocation.getter(#subscriptions),
        ),
      ) as _i5.ObservableMap<String, _i17.Subscription>);

  @override
  set subscriptions(_i5.ObservableMap<String, _i17.Subscription>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #subscriptions,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ObservableList<String> get selectedServers => (super.noSuchMethod(
        Invocation.getter(#selectedServers),
        returnValue: _FakeObservableList_3<String>(
          this,
          Invocation.getter(#selectedServers),
        ),
      ) as _i5.ObservableList<String>);

  @override
  set selectedServers(_i5.ObservableList<String>? value) => super.noSuchMethod(
        Invocation.setter(
          #selectedServers,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i11.ClashTournament> get availableTentativeTournaments =>
      (super.noSuchMethod(
        Invocation.getter(#availableTentativeTournaments),
        returnValue: <_i11.ClashTournament>[],
      ) as List<_i11.ClashTournament>);

  @override
  int get numberOfTeams => (super.noSuchMethod(
        Invocation.getter(#numberOfTeams),
        returnValue: 0,
      ) as int);

  @override
  int get numberOfTentativeQueues => (super.noSuchMethod(
        Invocation.getter(#numberOfTentativeQueues),
        returnValue: 0,
      ) as int);

  @override
  Map<String, List<_i15.ClashTeam>> get mapOfClashTeamsToServer =>
      (super.noSuchMethod(
        Invocation.getter(#mapOfClashTeamsToServer),
        returnValue: <String, List<_i15.ClashTeam>>{},
      ) as Map<String, List<_i15.ClashTeam>>);

  @override
  _i5.ObservableList<_i15.ClashTeam> get filteredTeamsList =>
      (super.noSuchMethod(
        Invocation.getter(#filteredTeamsList),
        returnValue: _FakeObservableList_3<_i15.ClashTeam>(
          this,
          Invocation.getter(#filteredTeamsList),
        ),
      ) as _i5.ObservableList<_i15.ClashTeam>);

  @override
  _i5.ObservableList<_i16.TentativeQueue> get filteredTentativeQueues =>
      (super.noSuchMethod(
        Invocation.getter(#filteredTentativeQueues),
        returnValue: _FakeObservableList_3<_i16.TentativeQueue>(
          this,
          Invocation.getter(#filteredTentativeQueues),
        ),
      ) as _i5.ObservableList<_i16.TentativeQueue>);

  @override
  bool get canAddMorePreferredChampions => (super.noSuchMethod(
        Invocation.getter(#canAddMorePreferredChampions),
        returnValue: false,
      ) as bool);

  @override
  bool get canAddMoreSelectedServers => (super.noSuchMethod(
        Invocation.getter(#canAddMoreSelectedServers),
        returnValue: false,
      ) as bool);

  @override
  bool get clashBotUserDetailsLoaded => (super.noSuchMethod(
        Invocation.getter(#clashBotUserDetailsLoaded),
        returnValue: false,
      ) as bool);

  @override
  _i5.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i5.ReactiveContext);

  @override
  Map<String, List<_i15.ClashTeam>> group() => (super.noSuchMethod(
        Invocation.method(
          #group,
          [],
        ),
        returnValue: <String, List<_i15.ClashTeam>>{},
      ) as Map<String, List<_i15.ClashTeam>>);

  @override
  _i5.ObservableList<_i15.ClashTeam> filter() => (super.noSuchMethod(
        Invocation.method(
          #filter,
          [],
        ),
        returnValue: _FakeObservableList_3<_i15.ClashTeam>(
          this,
          Invocation.method(
            #filter,
            [],
          ),
        ),
      ) as _i5.ObservableList<_i15.ClashTeam>);

  @override
  _i5.ObservableList<_i16.TentativeQueue> filterTentativeQueues() =>
      (super.noSuchMethod(
        Invocation.method(
          #filterTentativeQueues,
          [],
        ),
        returnValue: _FakeObservableList_3<_i16.TentativeQueue>(
          this,
          Invocation.method(
            #filterTentativeQueues,
            [],
          ),
        ),
      ) as _i5.ObservableList<_i16.TentativeQueue>);

  @override
  void setCallInProgess() => super.noSuchMethod(
        Invocation.method(
          #setCallInProgess,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void callFinished() => super.noSuchMethod(
        Invocation.method(
          #callFinished,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showTeamsView() => super.noSuchMethod(
        Invocation.method(
          #showTeamsView,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showTentativeView() => super.noSuchMethod(
        Invocation.method(
          #showTentativeView,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void filterByServer(String? serverId) => super.noSuchMethod(
        Invocation.method(
          #filterByServer,
          [serverId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void filterByTournamentName(String? tournamentName) => super.noSuchMethod(
        Invocation.method(
          #filterByTournamentName,
          [tournamentName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void filterByTournamentDay(String? tournamentDay) => super.noSuchMethod(
        Invocation.method(
          #filterByTournamentDay,
          [tournamentDay],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<_i7.ClashBotUser> createUser(
    String? defaultServerId,
    List<String>? selectedServersToUse,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [
            defaultServerId,
            selectedServersToUse,
          ],
        ),
        returnValue: _i13.Future<_i7.ClashBotUser>.value(_FakeClashBotUser_7(
          this,
          Invocation.method(
            #createUser,
            [
              defaultServerId,
              selectedServersToUse,
            ],
          ),
        )),
      ) as _i13.Future<_i7.ClashBotUser>);

  @override
  _i13.Future<void> refreshClashBotUserDetails() => (super.noSuchMethod(
        Invocation.method(
          #refreshClashBotUserDetails,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> addChampion(String? name) => (super.noSuchMethod(
        Invocation.method(
          #addChampion,
          [name],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> removeChampion(String? name) => (super.noSuchMethod(
        Invocation.method(
          #removeChampion,
          [name],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> overwriteChampions(List<String>? newChampions) =>
      (super.noSuchMethod(
        Invocation.method(
          #overwriteChampions,
          [newChampions],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> overwriteSelectedServers(List<String>? selectedServerIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #overwriteSelectedServers,
          [selectedServerIds],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> addSelectedServer(String? selectedServerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSelectedServer,
          [selectedServerId],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> removeSelectedServer(String? selectedServerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeSelectedServer,
          [selectedServerId],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> refreshTeamList() => (super.noSuchMethod(
        Invocation.method(
          #refreshTeamList,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void addClashTeam(_i15.ClashTeam? clashTeamToAdd) => super.noSuchMethod(
        Invocation.method(
          #addClashTeam,
          [clashTeamToAdd],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeClashTeams(_i15.ClashTeam? clashTeamToRemove) =>
      super.noSuchMethod(
        Invocation.method(
          #removeClashTeams,
          [clashTeamToRemove],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateClashTeam(_i15.ClashTeam? updatedClashTeam) => super.noSuchMethod(
        Invocation.method(
          #updateClashTeam,
          [updatedClashTeam],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> refreshTentativeQueue() => (super.noSuchMethod(
        Invocation.method(
          #refreshTentativeQueue,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void addTentativeQueue(_i16.TentativeQueue? tentativeQueueToAdd) =>
      super.noSuchMethod(
        Invocation.method(
          #addTentativeQueue,
          [tentativeQueueToAdd],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeTentativeQueue(_i16.TentativeQueue? tentativeQueueToRemove) =>
      super.noSuchMethod(
        Invocation.method(
          #removeTentativeQueue,
          [tentativeQueueToRemove],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateTentativeQueue(_i16.TentativeQueue? updatedTentativeQueue) =>
      super.noSuchMethod(
        Invocation.method(
          #updateTentativeQueue,
          [updatedTentativeQueue],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> createTeam(
    String? name,
    _i17.Role? role,
    String? serverId,
    String? tournamentName,
    String? tournamentDay,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTeam,
          [
            name,
            role,
            serverId,
            tournamentName,
            tournamentDay,
          ],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> removeFromTeam(String? teamId) => (super.noSuchMethod(
        Invocation.method(
          #removeFromTeam,
          [teamId],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> addToTeam(
    _i17.Role? role,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToTeam,
          [
            role,
            teamId,
          ],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> createTentativeQueue(
    String? serverId,
    String? tournamentName,
    String? tournamentDay,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTentativeQueue,
          [
            serverId,
            tournamentName,
            tournamentDay,
          ],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> removeFromTentativeQueue(String? tentativeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromTentativeQueue,
          [tentativeId],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> addToTentativeQueue(String? tentativeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToTentativeQueue,
          [tentativeId],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> toggleSubscription(_i17.SubscriptionType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleSubscription,
          [type],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [RiotChampionStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockRiotChampionStore extends _i1.Mock implements _i4.RiotChampionStore {
  MockRiotChampionStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.LoLChampionsData get lChampionsData => (super.noSuchMethod(
        Invocation.getter(#lChampionsData),
        returnValue: _FakeLoLChampionsData_8(
          this,
          Invocation.getter(#lChampionsData),
        ),
      ) as _i8.LoLChampionsData);

  @override
  set lChampionsData(_i8.LoLChampionsData? value) => super.noSuchMethod(
        Invocation.setter(
          #lChampionsData,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get championNames => (super.noSuchMethod(
        Invocation.getter(#championNames),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get championDataLoaded => (super.noSuchMethod(
        Invocation.getter(#championDataLoaded),
        returnValue: false,
      ) as bool);

  @override
  _i5.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i5.ReactiveContext);

  @override
  _i13.Future<void> refreshChampionData() => (super.noSuchMethod(
        Invocation.method(
          #refreshChampionData,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}
